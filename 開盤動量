import numpy as np
import pandas as pd 
pd.set_option('display.max_columns', None)
pd.set_option('display.max_rows', None)
import matplotlib.pyplot as plt 
import yfinance as yfin
plt.style.use('seaborn-v0_8')
import talib
from talib import abstract
import math

import os
import seaborn as sns
import requests
import datetime as dt
import time
plt.style.use('ggplot')

file_path =r'C:\Users\HARRY JUAN\Desktop\backtest.txt'
df = pd.read_csv(file_path,encoding='unicode_escape')

print(df.tail())

#選時間段
start_date = '2010-01-01'
end_date = '2023-06-30'
tick_data = df[(df['Date'] >= start_date) & (df['Date'] <= end_date)].reset_index(drop=True)
tick_data.index = pd.to_datetime(tick_data['datetime'])#把時間訂為index，讀為時間序列形式(將日期時間資料轉為timeseries並設為索引)
tick_data.sort_index(inplace=True)
print(tick_data.tail())


tick_data = tick_data.drop(columns=['Date', 'Time', 'datetime','Unnamed: 0'])#使用不到的資料DROP調並附上Hour column
tick_data.columns = ['open', 'high', 'low', 'close', 'volume']
tick_data['Hour'] = tick_data.index.hour
tick_data.head(3)



#resample
rule = '15T'

Morning = tick_data[(tick_data['Hour'] >= 8) & (tick_data['Hour'] <= 13)]
Morning.index = Morning.index + dt.timedelta(minutes=15)

d1 = Morning.resample(rule=rule, closed='right', label='left').first()[['open']]
d2 = Morning.resample(rule=rule, closed='right', label='left').max()[['high']]
d3 = Morning.resample(rule=rule, closed='right', label='left').min()[['low']]
d4 = Morning.resample(rule=rule, closed='right', label='left').last()[['close']]
d5 = Morning.resample(rule=rule, closed='right', label='left').sum()[['volume']]

df_Morning = pd.concat([d1,d2,d3,d4,d5], axis=1)#水平合併
df_Morning = df_Morning.dropna()
df_Morning.index = df_Morning.index - dt.timedelta(minutes=15)
df_Morning.head()
data=df_Morning
data.head()

#結算日資料
file_path =r'C:\Users\HARRY JUAN\Desktop\settlementDate.csv'
settlementDate_ = pd.read_csv(file_path)
settlementDate_.columns = ['settlementDate', 'futures', 'settlementPrice']
settlementDate_
bool_ = [False if 'W' in i else True for i in settlementDate_['futures']]

len(list(settlementDate_[bool_]['futures']))
settlementDate = [i.replace('/','-') for i in list(settlementDate_[bool_]['settlementDate'])]
settlementDate = [pd.to_datetime(i).date() for i in settlementDate]
settlementDate[-5:]




first3 = data.groupby(data.index.date).head(3)

first3 =first3[(first3.index >= '2010-01-01 00:00:00') & (first3.index <= '2023-06-30 23:59:59')].copy()
#Ensure the index is of type DatetimeIndex
if not isinstance(first3.index, pd.DatetimeIndex):
    first3.index = pd.to_datetime(first3.index)
    
first3['time'] = 0
    
for i in range(len(first3)):
        if first3.index[i].time() == pd.to_datetime('09:15:00').time():
            first3.loc[first3.index[i], 'time'] = 1
        
        else:
            first3.loc[first3.index[i], 'time'] = 0
long = first3['time'].value_counts().get(1, 0)
short = first3['time'].value_counts().get(0, 0)           
print(long, short)#資料期間空頭居多

    
first3['index'] = 0
# 開倉訊號
for i in range(2, len(first3)-1):
    if(first3.loc[first3.index[i-2],'open'] < first3.loc[first3.index[i-1],'open'] < first3.loc[first3.index[i],'open'])and\
      (first3.loc[first3.index[i-2],'low'] < first3.loc[first3.index[i-1],'low'] < first3.loc[first3.index[i],'low'])and\
      (first3.loc[first3.index[i-2],'close'] < first3.loc[first3.index[i-1],'close'] < first3.loc[first3.index[i],'close'])and\
      (first3.iloc[i]['time']==1):
           
          first3.loc[first3.index[i], 'index'] = 2
           
    elif(first3.loc[first3.index[i-2],'open'] > first3.loc[first3.index[i-1],'open'] > first3.loc[first3.index[i],'open'])and\
      (first3.loc[first3.index[i-2],'high'] > first3.loc[first3.index[i-1],'high'] > first3.loc[first3.index[i],'high'])and\
      (first3.loc[first3.index[i-2],'close'] > first3.loc[first3.index[i-1],'close'] > first3.loc[first3.index[i],'close'])and\
      (first3.iloc[i]['time']==1):

          first3.loc[first3.index[i],'index'] = -2
          
entrylong = first3['index'].value_counts().get(2, 0)
entryshort = first3['index'].value_counts().get(-2, 0)
print(entrylong,entryshort)
print(first3.tail())

first3_subset = first3[['time', 'index']]
merged_data = pd.merge(data, first3_subset, left_index=True, right_index=True, how='left')
# Fill missing values with 0
merged_data = merged_data.fillna(0)
print(merged_data.head(10))


#計算atr
# 計算ATR指標，從第1筆資料到第i筆資料的平均值
merged_data['high_low'] = merged_data['high'] - merged_data['low']
merged_data['high_close'] = np.abs(merged_data['high'] - merged_data['close'].shift(1))
merged_data['low_close'] = np.abs(merged_data['low'] - merged_data['close'].shift(1))

merged_data['tr'] = merged_data[['high_low', 'high_close', 'low_close']].max(axis=1)
merged_data['atr'] = merged_data.groupby(merged_data.index.date)['tr'].apply(lambda x: x.expanding().mean()).reset_index(level=0, drop=True)
merged_data = merged_data.drop(columns=['high_low', 'high_close', 'low_close', 'tr'])
print(merged_data.head())






#這裡的最高價和最低價應該以當天開倉時的最高/最低，而不是歷史累積
def exclude_first_three_and_cummax(group):
    # 将前三笔数据设为 NaN
    group.iloc[:3] = np.nan
    # 对剩余数据计算累积最大值
    return group.cummax()

def exclude_first_three_and_cummin(group):
    # 将前三笔数据设为 NaN
    group.iloc[:3] = np.nan
    # 对剩余数据计算累积最小值
    return group.cummin()

# 计算 cummax 和 cummin 排除每天的前三笔数据
merged_data['cummax_value'] = merged_data.groupby(pd.Grouper(freq='D'))['high'].transform(exclude_first_three_and_cummax)
merged_data['cummin_value'] = merged_data.groupby(pd.Grouper(freq='D'))['low'].transform(exclude_first_three_and_cummin)


merged_data['up_reverse_atr'] = 0
merged_data['bottom_reverse_atr'] = 0
trade_day = 0
for i in range(len(merged_data)):
    if merged_data.index[i].time() == pd.to_datetime('08:45:00').time():

        flag = 0
        
    if merged_data.loc[merged_data.index[i],'index'] == 2:
        flag = 2
    elif merged_data.loc[merged_data.index[i],'index'] == -2:
        flag = -2
    
    
    if (merged_data.loc[merged_data.index[i],'close'] - merged_data.loc[merged_data.index[i],'cummax_value'] < -2.5* merged_data.loc[merged_data.index[i-1],'atr']) and \
         merged_data.index[i].time() > pd.to_datetime('09:15:00').time() and flag == 2:      
        merged_data.loc[merged_data.index[i],'up_reverse_atr'] = -1
        
        
    elif (merged_data.loc[merged_data.index[i],'close'] - merged_data.loc[merged_data.index[i],'cummin_value'] > 2 * merged_data.loc[merged_data.index[i-1],'atr']) and \
         merged_data.index[i].time() > pd.to_datetime('09:15:00').time() and flag == -2:
        merged_data.loc[merged_data.index[i],'bottom_reverse_atr'] = 1
         
        
atrlong = merged_data['up_reverse_atr'].sum()
atrshort =merged_data['bottom_reverse_atr'].sum()
print(atrlong,atrshort)
#print(merged_data.head(70))



merged_data['up_reverse_trend'] = 0
merged_data['bottom_reverse_trend'] = 0
trade_day1 = 0
trade_day2 = 0
#減倉信號，原始資料名字是data
for n in range(7,len(merged_data)):
    
    if merged_data.index[n].time() == pd.to_datetime('08:45:00').time():
        trade_day1 = 3
        
    if (merged_data.loc[merged_data.index[n-4],'high'] > merged_data.loc[merged_data.index[n-3],'high'] > merged_data.loc[merged_data.index[n-2],'high']  > merged_data.loc[merged_data.index[n-1],'high'] > merged_data.loc[merged_data.index[n],'high'])\
        and (trade_day1 >0) :
        merged_data.loc[merged_data.index[n],'up_reverse_trend'] = -1
        trade_day1 -=1 
        
for n in range(5,len(merged_data)):
    
    if merged_data.index[n].time() == pd.to_datetime('08:45:00').time():
        trade_day2 = 3
    if (merged_data.loc[merged_data.index[n-2],'low']  < merged_data.loc[merged_data.index[n-1],'low'] < merged_data.loc[merged_data.index[n],'low'])\
        and (trade_day2 >0) :
        merged_data.loc[merged_data.index[n],'bottom_reverse_trend'] = 1
        trade_day2 -=1 

reducelong = merged_data['up_reverse_trend'].sum()
reduceshort =merged_data['bottom_reverse_trend'].sum()
print(reducelong,reduceshort)


#觀察原資料
plt.figure(figsize = (15,7))
plt.plot(merged_data['close'], color = 'red', alpha = 0.5, label = 'Close price')
plt.legend(loc='upper left')
plt.title('Volume History')


merged_data['hour'] = merged_data.index.hour
merged_data['date'] = merged_data.index.date
#設置隔夜平倉欲提取值
overnight_price_condition = merged_data.index.time == pd.to_datetime('13:30:00').time()
merged_data.loc[overnight_price_condition, 'overnight'] = merged_data['open'].shift(-1)

print(merged_data.head(10))
 







merged_data['lev_atr'] = ((0.5/100 )/ merged_data['atr']) *merged_data['close']
###限制槓桿率
merged_data['log_return'] = np.log(merged_data['close'] / merged_data['close'].shift(1))
# 使用一年（252个交易日）年化標準差
annual_trading_days = 252
merged_data['rolling_volatility'] = merged_data['log_return'].rolling(window=annual_trading_days).std() * np.sqrt(annual_trading_days)
merged_data['lev'] = ((15/100)/merged_data['rolling_volatility'])*merged_data['lev_atr']

###差補第一年的槓桿率
merged_data['log_return'] = np.log(merged_data['close'] / merged_data['close'].shift(1))
annual_trading_days = 252
annualized_volatility = np.std(merged_data['log_return'].dropna()) * np.sqrt(annual_trading_days)
# 更新 'lev' 列中为 NaN 的值
merged_data.loc[merged_data['rolling_volatility'].isna(), 'rolling_volatility'] = annualized_volatility
merged_data['lev'] = ((15/100)/merged_data['rolling_volatility'])*merged_data['lev_atr']
print(merged_data.head()) 

merged_data['lev'].describe()

# 计算并绘制含有均值线的图表
lev_atr_mean = merged_data['lev_atr'].mean()
plt.figure(figsize=(12, 6))  # 再次设置图表大小
merged_data['lev_atr'].plot(kind='line', label='lev_atr', color='Navy', linewidth=2)  # 设置颜色和线宽
plt.axhline(y=lev_atr_mean, color='Crimson', linestyle='--', linewidth=2, label=f'Mean: {lev_atr_mean:.2f}')  # 添加均值线
# 设置图表细節
plt.xlabel('Date', fontsize=12)  # 设置横轴标签和字体大小
plt.ylabel('lev_atr Value', fontsize=12)  # 设置纵轴标签和字体大小
plt.title('lev_atr over Time', fontsize=14, fontweight='bold')  # 设置标题和加粗字体
# 添加图例和网格
plt.legend(fontsize=12)
plt.grid(True, linestyle='--', alpha=0.7)
# 显示最终图表
plt.show()






df_arr = np.array(merged_data)#轉換成矩陣型態進行運算
time_arr = np.array(merged_data.index)#轉換矩陣後的索引會消失，所以創造另一陣列保留
date_arr = [pd.to_datetime(i).date() for i in time_arr]

#參數設定
fund = 1000000
feePaid = 600  #進出手續費
Position = 0

BS = None
Position = 0
buy_price = 0
sell_price = 0
reduce_price = 0
buy = []
sell = []
profit_list = [0]
profit_fee_list = [0]
profit_fee_list_realized = []
cost_list = []
rets = []
sellshort = []
buytocover = []
cutBuy = 0
cutSell = 0
for i in range(len(df_arr)):

    #回測期間最後一天就跳出這個迴圈
    if i == len(df_arr)-1:
        break

    ## 進場邏輯
    ### 開盤多頭訊號
    entryLong = (df_arr[i,6] == 2)
    ### 開盤空頭訊號
    entrySellShort = (df_arr[i,6] == -2)
    ### 結算日不進場
    entryCondition = date_arr[i] not in settlementDate
    ### 結算日時放到結算
    exitCondition = date_arr[i] in settlementDate and df_arr[i,14] >= 11
    
    day_cross = df_arr[i,15] != df_arr[i+1,15]
    lev_limit = df_arr[i,20] <=3.9
     
    ## 減倉邏輯
    if BS == 'B':
        reduce_condition = (df_arr[i,10] == -1 or df_arr[i,12] == -1) 

    elif BS == 'S':
        reduce_condition = (df_arr[i,11] == 1 or df_arr[i,13] == 1) 


    if (BS == None) & (Position == 0):
        profit_list.append(0)
        profit_fee_list.append(0)

        if entryLong  and entryCondition and lev_limit:
            BS = 'B'

            Position = 3
            t = i+1
            buy_price = df_arr[i+1, 0] #下一根的開盤價
            cost_list.append(buy_price)
            cost_list.append(buy_price)
            cost_list.append(buy_price)
            buy.append([i+1]*3)
        elif entrySellShort and entryCondition and lev_limit:
            BS = 'S'
            
            Position = 3
            t = i+1
            sell_price  = df_arr[i+1, 0]#下一根的開盤價
            cost_list.append(sell_price)
            cost_list.append(sell_price)
            cost_list.append(sell_price)
            sell.append([i+1]*3)
            
    elif BS == 'B':

        profit = 200 * (df_arr[i+1,0] - df_arr[i,0]) * Position
        profit_list.append(profit)

        if  day_cross or i == len(df_arr)-2 or exitCondition :
            pl_round = 200 * (Position*df_arr[i, 16] - np.sum(cost_list))#隔夜價格
            profit_fee = profit - feePaid*2*Position
            profit_fee_list.append(profit_fee)
            sell.append(i*3)

            # Realized PnL
            profit_fee_realized = pl_round - feePaid*2*Position
            profit_fee_list_realized.append(profit_fee_realized)
            rets.append(profit_fee_realized/(200*df_arr[t,0]))

            BS = None
            Position = 0
            buy_price = 0
            reduce_price = 0
            cost_list = []

        #計算減倉損益
        elif (3 > Position > 0) and reduce_condition and lev_limit:
           
            
            sell_price = df_arr[i+1, 0]
            profit = 200*(sell_price - cost_list[1])
            cost_list.pop(1)
            profit_list.append(profit)
            
            profit_fee = profit -feePaid*2
            profit_fee_list.append(profit_fee)
             
            Position -= 1
            sell.append(i+1)
        else:
            profit_fee = 200 * (df_arr[i+1,0] - df_arr[i,0]) * Position
            profit_fee_list.append(profit_fee)

    elif BS == 'S':

        profit = 200 * (df_arr[i,0] - df_arr[i+1,0]) * Position
        profit_list.append(profit)

        if  day_cross or i == len(df_arr)-2 or exitCondition :
            pl_round = 200 * (np.sum(cost_list) - Position*df_arr[i+1, 0])
            profit_fee = profit - feePaid*2*Position
            profit_fee_list.append(profit_fee)
            buy.append([i+1]*3)

            #Realized PnL
            profit_fee_realized = pl_round - feePaid*2*Position
            profit_fee_list_realized.append(profit_fee_realized)
            rets.append(profit_fee_realized/(200*df_arr[t,0]))

            BS = None
            Position = 0
            sell_price = 0
            reduce_price = 0
            cost_list = []

        #減碼要計算該倉位報酬
        elif (3 > Position > 0) and reduce_condition and lev_limit :
            #更改部位數量
            buy_price = df_arr[i+1, 0]

            profit = 200*(cost_list[1] - buy_price)
            cost_list.pop(1)
            profit_list.append(profit)
            
            profit_fee = profit -feePaid*2
            profit_fee_list.append(profit_fee)
            
            Position -= 1
            buy.append(i+1)
        else:
            profit_fee = 200 * (df_arr[i,0] - df_arr[i+1,0]) * Position
            profit_fee_list.append(profit_fee)


equity = pd.DataFrame({'profit':np.cumsum(profit_list), 'profitfee':np.cumsum(profit_fee_list)}, index=merged_data.index)
# print(equity)
equity.plot(grid=True, figsize=(12,6))

import seaborn as sns
import matplotlib.pyplot as py
plt.style.use('ggplot')

#print(equity)
#綜合績效
equity['equity'] = equity['profitfee'] + fund
equity['drawdown_percent'] = (equity['equity']/equity['equity'].cummax()) - 1
equity['drawdown'] = equity['equity'] - equity['equity'].cummax() #前n個元素的最大值
#print(profit_fee_list_realized)
profit = equity['profitfee'].iloc[-1]
ret = equity['equity'][-1]/equity['equity'][0] - 1
mdd = abs(equity['drawdown_percent'].min())
calmarRatio = ret / mdd #可以檢視賺錢和賠錢比，通常大於一就是比較好
tradeTimes = len(buy) + len(sell)
winRate = len([i for i in profit_fee_list_realized if i > 0]) / len(profit_fee_list_realized)
profitFactor = sum([i for i in profit_fee_list_realized if i>0]) / abs(sum([i for i in profit_fee_list_realized if i<0]))

print('Profit : ',profit)
print('Return : ',ret)
print('Max DrawDown : ',mdd)
print('Calmar Ratio : ',calmarRatio)
print('Trade Times : ',tradeTimes)
print('Win Rate : ',winRate)
print('Profit Factor : ',profitFactor)


import quantstats
ret = equity['equity'].pct_change(periods=1).dropna() #輸入的資料是前述的equity
print(ret)
quantstats.reports.full(ret)


equity.index = pd.to_datetime(equity.index) #確保索引是datetime型態
years = ['2010', '2011', '2012', '2013', '2014', '2015', '2016', '2017', '2018', '2019', '2020', '2021', '2022','2023']
year_ret = []
print(equity.index.year.unique())
for i in equity.index.year.unique():
    year_ret.append(equity[equity.index.year == i]['equity'].iloc[-1]/equity[equity.index.year == i]['equity'].iloc[0] - 1)

df = pd.DataFrame({'Return':year_ret},index = years)

# heatmap函式
plt.figure(figsize=(15, 1))
sns.heatmap(df.transpose(), annot=True, cmap='OrRd', fmt='.2%')  # fmt='.2%' 格式化為百分比
plt.title('Return by year')
plt.show()
